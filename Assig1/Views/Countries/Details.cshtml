@model Assig1.Models.Country

@{
    ViewData["Title"] = "Country Details";
}

<h1>Details</h1>

<!--Variables to store Emission & temperature details(min, max, avg) -->
@{
    var avgEmission = Model.CountryEmissions.Average(e => e.Value);
    var maxEmission = Model.CountryEmissions.Max(e => e.Value);
    var minEmission = Model.CountryEmissions.Min(e => e.Value);

    var avgTemperature = Model.TemperatureData.Average(t => t.Value);
    var maxTemperature = Model.TemperatureData.Max(t => t.Value);
    var minTemperature = Model.TemperatureData.Min(t => t.Value);
}

<!-- Country Details represented in a Bootstrap Card -->
<div class="card mb-4">
    <!--Display Country name-->
    <div class="card-header">
        <h2>@Model.CountryName</h2>
    </div>
    <!--Display Country image-->
    <div class="card-body d-flex justify-content-center">
        <img src="@Model.ImageUrl" alt="@Model.CountryName" class="img-fluid" style="max-width: 400px;">
    </div>
    <!--Display Region the country is from-->
    <div class="card-footer">
        <p>Region: @(Model.Region?.RegionName ?? "Not Available")</p>
    </div>
</div>


<!--Card to display the min , max and avg data-->
<div class="card mt-4 mb-4">

    <div class="card-header">

        <h3>Summary Data</h3>

    </div>
    
    <div class ="card-body">

        <div class="row">

            <div class="col-md-5">

                <h5 class="text-primary">Emission Data:</h5>

                <!--Diaplay Emissions data-->
                <p> <strong> Average Emission: </strong> @(avgEmission?.ToString("F2")?? "Not Available")</p>
                <p> <strong> Max Emission: </strong> @(maxEmission?.ToString("F2") ?? "Not Available")</p>
                <p> <strong> Min Emission: </strong> @(minEmission?.ToString("F2") ?? "Not Available")</p>

            </div>

            <div class="col-md-4">

                <h5 class="text-primary">Temperature Data:</h5>

                <!--Diaplay Temperature data-->
                <p> <strong> Average Temperature:  </strong> @(avgTemperature?.ToString("F2") ?? "Not Available")</p>
                <p> <strong> Max Temperature: </strong> @(maxTemperature?.ToString("F2") ?? "Not Available")</p>
                <p> <strong> Min Temperature: </strong> @(minTemperature?.ToString("F2") ?? "Not Available")</p>


            </div>


        </div>



    </div>

    

</div>


<!--Displaying the Temperature data and Emissions data in -->
<div class="row">

    <div class="col-md-5">

        <h3>Emission data</h3>
        


   </div>

   <div class="col-md-4">

        <!--Displaying Temperature data in the table-->
        <h3>Temperature Data</h3>

        <table class="table table-striped" style="width:40%">

            <tr>
                <th>Year</th>
                <th>Temperature Change</th>
                <th>Temperature Value</th>
            </tr>

            <!--Check for temperature in the model-->
            @if (Model.TemperatureData.Any())

            {
                <!--Order the available temperature data by year -->
                foreach (var temp in Model.TemperatureData.OrderBy(t => t.Year))

                {
                    <tr>

                        <td>@temp.Year</td>
                        <td class="col-5">@(string.IsNullOrEmpty(temp.Change) ? "Not Available" : temp.Change)</td>
                        <td>@(temp.Value.HasValue ? $"{temp.Value.Value} °C" : "Not Available")</td>

                    </tr>

                }

            }
            else
            {
                <tr>
                    <td colspan="3">No data available</td>
                </tr>

            }

        </table>

       

   </div>
  

</div>



@*    <!-- For each loop that iterates through a 
    sorted list of unique years from two different data sources 
    (CountryEmissions and TemperatureData) in ascending order and display data for each year.-->
    @foreach (var year in Model.CountryEmissions.Select(e => e.Year.GetValueOrDefault())
            .Union(Model.TemperatureData
            .Select(t => t.Year))
            .Distinct()
            .OrderBy(y => y))
    {

        //Variable to hold emissons data
         var emissionForYear = Model.CountryEmissions.FirstOrDefault(e => e.Year == year);

         //Variable to hold temperature data
            var temperatureForYear = Model.TemperatureData.FirstOrDefault(t => t.Year == year);
            <tr>
                <td>@year</td>
                <td>@temperatureForYear?.Change</td>
                <td>@temperatureForYear?.Value</td>
            </tr>
        
    }*@




<!-- Buttons to view cities and return to the country list -->
<div class="d-flex justify-content-between mt-4">
    <a asp-controller="Cities" asp-action="Index" asp-route-countryID="@Model.CountryId" class="btn btn-primary">View Cities</a>
    <a asp-controller="Countries" asp-action="Index" asp-route-id="@Model.RegionId" class="btn btn-secondary">Back to Countries List</a>
</div>

